3.2.4 高阶函数的其他应用
1.currying  函数柯里化
  currying又称为部分求值。一个currying函数首先会接受一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另外一个函数，
  刚才传入的参数在函数形成的闭包中被保存起来。待到函数被真正求值的时候，之前传入的所有参数将会被一次性用于求值。
  
var currying = function(fn) {
    var args = [];
    
    return function() {
        if (arguments.length === 0) {
            return fn.apply(args, arguments);
        }else {
            [].push.apply(args, arguments);
            return arguments.callee
        }
    }
}

2.uncurrying

实现方式1
Function.prototype.uncurrying = function() {
    var self = this;
    return function() {
        var obj = Array.prototype.shift.call(arguments);
        return self.apply(obj, arguments);
    }
}
实现方式2
Function.prototype.uncurrying = function() {
    var self = this;
    return function() {
        return Function.prototype.call.apply(seft, arguments);
    }
}

3. 函数节流
（1）函数被频繁调用的场景
    * window.onresize 事件
    * mousemove 事件
    * 上传进度
（2）函数节流的原理
共同问题是函数的出发频率太高

（3）函数节流的代码实现
throttle函数的原理：将即将要执行的函数用setTimeout延迟一段时间执行。如果这次延迟执行还没有完成，
则忽略接下来调用该函数的请求。throttle函数接受两个参数，第一个参数为需要被延迟执行的函数，第二个函数为延迟执行的时间。

function trottle (fn, interval) {
    var _self = fn;
    var timer;
    var firstTime = true;

    return function() {
        var args = arguments;
        var _me = this;
        if (firstTime) {
            _self.apply(_me, args);
            firstTime = false;
        }
        // 如果定时器还在，说明上次的延迟操作还没有结束
        if (timer) {
            return false;
        }

        timer = setTimeout(function() {
            clearTimeout(timer);
            timer = null;
            _self.apply(_me, args);
        }, interval || 500);
    }
}

window.onresize = trottle(function() {
    console.log(1)
}, 500);

4. 分时函数

/**
 * ary： 需要的数据
 * fn: 创建节点逻辑的函数
 * count：每一批创建节点的数量
 * */
var timeChunk = function(ary, fn, count) {
    var obj, 
        t;

    var len = ary.length;
    
    var start = function() {
        for (var i = 0; i < Math.min(count || 1, ary.length); i++) {
            var obj = ary.shift();
            fn(obj);
        }
    }


    return function() {
        t = setInterval(function() {
            if (ary.length === 0) {
                return clearInterval(t);
            }
            start();
        }, 200);
    };
}

5. 惰性加载函数
惰性载入函数方案。首先函数依旧被声明为一个普通函数，在函数里
依然有一些分支判断。但在第一次进入条件分支后，在函数内部会重写这个函数，
重写之后的函数就是我们期望的函数，下次进入函数时就不存在条件分支语句

var addEvent = function(elem, type, handler) {
  if (window.addEventListener) {
    addEvent = function(elem, type, handler) {
      elem.addEventListener(type, handler, false)
    }
  }else if (window.attachEvent) {
    addEvent = function(elem, type, handler) {
      elem.attachEvent('on' + type, handler);
    }
  }
  addEvent(elem, type, handler)
}
